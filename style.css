const express = require('express');
const cors = require('cors');
const { WebSocketServer } = require('ws');

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;

const sessions = {};  // { sessionId: { key, used } }
const clients = {};   // { sessionId: [ws...] }

app.post('/create-session', (req, res) => {
  const sessionId = Math.random().toString(36).substring(2, 12);
  sessions[sessionId] = { key: req.body.key, used: false };
  res.json({ session: sessionId });
});

app.get('/get-key/:sessionId', (req, res) => {
  const sess = sessions[req.params.sessionId];
  if (!sess) return res.status(404).json({ error: 'Not found' });
  if (sess.used) return res.status(410).json({ error: 'Already used' });
  sess.used = true;
  res.json({ key: sess.key });
});

const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

const wss = new WebSocketServer({ server, path: '/ws/:sessionId' });
wss.on('connection', (ws, req) => {
  const sessionId = req.url.split('/').pop();
  if (!clients[sessionId]) clients[sessionId] = [];
  clients[sessionId].push(ws);

  ws.on('message', msg => {
    clients[sessionId].forEach(c => {
      if (c !== ws && c.readyState === c.OPEN) c.send(msg);
    });
  });

  ws.on('close', () => {
    clients[sessionId] = clients[sessionId].filter(c => c !== ws);
    if (clients[sessionId].length === 0) delete clients[sessionId];
  });
});
